syntax = "proto3";

import "io/timemates/api/timers/sessions/requests/StartTimerSessionRequest.proto";
import "io/timemates/api/timers/sessions/requests/StopTimerSessionRequest.proto";
import "io/timemates/api/timers/sessions/requests/JoinTimerSessionRequest.proto";
import "io/timemates/api/timers/sessions/requests/ConfirmTimerSessionRequest.proto";
import "io/timemates/api/timers/sessions/requests/GetTimerStateRequest.proto";
import "io/timemates/api/timers/sessions/types/TimerState.proto";
import "google/protobuf/empty.proto";

option java_package = "io.timemates.api.timers";

/**
 * The TimerSessionsService provides operations related to timer sessions.
 */
service TimerSessionsService {

  /**
   * Starts the timer session.
   * This RPC method starts the timer session.
   */
  rpc startTimer(StartTimerRequest) returns (google.protobuf.Empty);

  /**
   * Stops the timer session.
   * This RPC method stops the timer session.
   */
  rpc stopTimer(StopTimerRequest) returns (google.protobuf.Empty);

  /**
   * Joins the timer session.
   * This RPC method allows a user to join the timer session.
   */
  rpc joinSession(JoinTimerSessionRequest) returns (google.protobuf.Empty);

  /**
   * Leaves the timer session.
   * This RPC method allows a user to leave the timer session.
   */
  rpc leaveSession(google.protobuf.Empty) returns (google.protobuf.Empty);

  /**
   * Confirms the user's attendance of the next round.
   * This RPC method confirms the user's attendance of the next round.
   * This is needed if the corresponding setting is enabled, usually you should
   * just await for [TimerState.ConfirmationWaiting] state.
   *
   * Server will automatically determine your session.
   */
  rpc confirmRound(google.protobuf.Empty) returns (google.protobuf.Empty);

  /**
   * Sends a ping request that says that client currently online and active.
   * Client should send such request once per 5 minutes.
   */
  rpc pingSession(google.protobuf.Empty) returns (google.protobuf.Empty);

  /**
   * Retrieves the current state of the timer.
   * This RPC method always returns the current state of the timer and then updates of it.
   * The state is returned as a stream of TimerState messages.
   */
  rpc getState(GetTimerStateRequest) returns (stream TimerState);
}
